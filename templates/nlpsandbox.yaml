AWSTemplateFormatVersion: 2010-09-09
Description: |
  NLP sandbox infrastructure
Parameters:
  Department:
    Description: 'The department for this resource'
    Type: String
    AllowedPattern: '^\S*$'
    ConstraintDescription: 'Must be string with no spaces'
  Project:
    Description: 'The name of the project that this resource is used for'
    Type: String
    AllowedPattern: '^\S*$'
    ConstraintDescription: 'Must be string with no spaces'
  OwnerEmail:
    Description: 'Email address of the owner of this resource'
    Type: String
    AllowedPattern: '^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$'
    ConstraintDescription: 'Must be an acceptable email address syntax(i.e. joe.smith@sagebase.org)'
  ParkMyCloudManaged:
    Description: Allow ParkMyCloud service to start/stop resources
    Type: String
    Default: 'yes'
  KeyName:
    Description: ec2 Key
    Type: String
    Default: tomnew

Resources:

  InstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: "Open a port for incoming traffic"
      VpcId: !ImportValue 'us-east-1-sandcastlevpc-VPCId'
      SecurityGroupIngress:
        - CidrIp: "0.0.0.0/0"
          FromPort: 80
          ToPort: 80
          IpProtocol: tcp
        - CidrIp: "0.0.0.0/0"
          FromPort: 443
          ToPort: 443
          IpProtocol: tcp
      SecurityGroupEgress:
        - CidrIp: "0.0.0.0/0"
          FromPort: -1
          ToPort: -1
          IpProtocol: "-1"
      Tags:
        - Key: "Department"
          Value: !Ref Department
        - Key: "Project"
          Value: !Ref Project
        - Key: "OwnerEmail"
          Value: !Ref OwnerEmail

  Elk:
    Type: 'AWS::EC2::Instance'
    Properties:
      # ubuntu base image
      ImageId: ami-0b7906ab614596e7e
      InstanceType: t2.xlarge
      Monitoring: True
      DisableApiTermination: False
      KeyName: !Ref KeyName
      BlockDeviceMappings:
      - DeviceName: "/dev/xvda"
        Ebs:
          DeleteOnTermination: true
          VolumeSize: 100
          Encrypted: true
      Tags:
        # - Key: !Ref TagKey
        #   Value: !Ref TagValue
        - Key: "Department"
          Value: !Ref Department
        - Key: "Project"
          Value: !Ref Project
        - Key: "OwnerEmail"
          Value: !Ref OwnerEmail
      NetworkInterfaces:
      - DeleteOnTermination: true
        DeviceIndex: "0"
        GroupSet:
        - !ImportValue 'us-east-1-sandcastlevpc-VpnSecurityGroup'
        - !GetAtt InstanceSecurityGroup.GroupId
        SubnetId: !ImportValue 'us-east-1-sandcastlevpc-PrivateSubnet'
      UserData:
        # install Docker and Docker-compose
        Fn::Base64:
          !Sub |
              #!/bin/bash -ex
              sudo apt-get update -y;
              sudo apt-get install docker -y;
              sudo service docker start;
              sudo usermod -a -G docker ec2-user;
              sudo curl -L https://github.com/docker/compose/releases/download/1.22.0/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose;
              sudo chmod +x /usr/local/bin/docker-compose;
  Datanode:
    Type: 'AWS::EC2::Instance'
    Properties:
      # ubuntu base image
      ImageId: ami-0b7906ab614596e7e
      InstanceType: t2.large
      Monitoring: True
      DisableApiTermination: False
      KeyName: !Ref KeyName
      BlockDeviceMappings:
      - DeviceName: "/dev/xvda"
        Ebs:
          DeleteOnTermination: true
          VolumeSize: 300
          Encrypted: true
      Tags:
        # - Key: !Ref TagKey
        #   Value: !Ref TagValue
        - Key: "Department"
          Value: !Ref Department
        - Key: "Project"
          Value: !Ref Project
        - Key: "OwnerEmail"
          Value: !Ref OwnerEmail
      NetworkInterfaces:
      - DeleteOnTermination: true
        DeviceIndex: "0"
        GroupSet:
        - !ImportValue 'us-east-1-sandcastlevpc-VpnSecurityGroup'
        - !GetAtt InstanceSecurityGroup.GroupId
        SubnetId: !ImportValue 'us-east-1-sandcastlevpc-PrivateSubnet'
      UserData:
        # install Docker and Docker-compose
        Fn::Base64:
          !Sub |
              #!/bin/bash -ex
              sudo apt-get update -y;
              sudo apt-get install docker -y;
              sudo service docker start;
              sudo usermod -a -G docker ec2-user;
              sudo curl -L https://github.com/docker/compose/releases/download/1.22.0/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose;
              sudo chmod +x /usr/local/bin/docker-compose;
  PhiDeidentifier:
    Type: 'AWS::EC2::Instance'
    Properties:
      # ubuntu base image
      ImageId: ami-0b7906ab614596e7e
      InstanceType: t2.medium
      Monitoring: True
      DisableApiTermination: False
      KeyName: !Ref KeyName
      BlockDeviceMappings:
      - DeviceName: "/dev/xvda"
        Ebs:
          DeleteOnTermination: true
          VolumeSize: 800
          Encrypted: true
      Tags:
        # - Key: !Ref TagKey
        #   Value: !Ref TagValue
        - Key: "Department"
          Value: !Ref Department
        - Key: "Project"
          Value: !Ref Project
        - Key: "OwnerEmail"
          Value: !Ref OwnerEmail
      NetworkInterfaces:
      - DeleteOnTermination: true
        DeviceIndex: "0"
        GroupSet:
        - !ImportValue 'us-east-1-sandcastlevpc-VpnSecurityGroup'
        - !GetAtt InstanceSecurityGroup.GroupId
        SubnetId: !ImportValue 'us-east-1-sandcastlevpc-PrivateSubnet'
      UserData:
        # install Docker and Docker-compose
        Fn::Base64:
          !Sub |
              #!/bin/bash -ex
              sudo apt-get update -y;
              sudo apt-get install docker -y;
              sudo service docker start;
              sudo usermod -a -G docker ec2-user;
              sudo curl -L https://github.com/docker/compose/releases/download/1.22.0/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose;
              sudo chmod +x /usr/local/bin/docker-compose;
  Infrastructure:
    Type: 'AWS::EC2::Instance'
    Properties:
      # ubuntu base image
      ImageId: ami-0b7906ab614596e7e
      InstanceType: t3.xlarge
      Monitoring: True
      DisableApiTermination: False
      KeyName: !Ref KeyName
      BlockDeviceMappings:
      - DeviceName: "/dev/xvda"
        Ebs:
          DeleteOnTermination: true
          VolumeSize: 100
          Encrypted: true
      Tags:
        # - Key: !Ref TagKey
        #   Value: !Ref TagValue
        - Key: "Department"
          Value: !Ref Department
        - Key: "Project"
          Value: !Ref Project
        - Key: "OwnerEmail"
          Value: !Ref OwnerEmail
      NetworkInterfaces:
      - DeleteOnTermination: true
        DeviceIndex: "0"
        GroupSet:
        - !ImportValue 'us-east-1-sandcastlevpc-VpnSecurityGroup'
        - !GetAtt InstanceSecurityGroup.GroupId
        SubnetId: !ImportValue 'us-east-1-sandcastlevpc-PrivateSubnet'
      UserData:
        # install Docker and Docker-compose
        Fn::Base64:
          !Sub |
              #!/bin/bash -ex
              sudo apt-get update -y;
              sudo apt-get install docker -y;
              sudo service docker start;
              sudo usermod -a -G docker ec2-user;
              sudo curl -L https://github.com/docker/compose/releases/download/1.22.0/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose;
              sudo chmod +x /usr/local/bin/docker-compose;
Outputs:
  Ec2:
    Value: !Ref Datanode
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-Datanode'
 